---
name: Terraform Plan & Apply - Dev

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main

    paths:
      - 'implementation/**'
      - 'configuration/**'

  workflow_dispatch:
    inputs:
      destroy:
        description: Destroy all resources
        required: false
        default: false
        type: boolean

env:
  TF_PLAN_FILE: tfplan
  TF_VERSION: 1.12.2

defaults:
  run:
    shell: bash
    working-directory: ./implementation

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: dev-plan

    outputs:
      has-changes: ${{ steps.tf-plan.outputs.has-changes }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN_GH_RUNNER }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get backend bucket from Parameter Store
        id: get-backend-bucket
        run: |
          BACKEND_BUCKET=$(aws ssm get-parameter --name "/tf/backend/s3" --query "Parameter.Value" --output text)
          echo "backend_bucket=$BACKEND_BUCKET" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="bucket=${{ steps.get-backend-bucket.outputs.backend_bucket }}" \
            -backend-config="key=terraform.tfstate" \
            -upgrade \
            -reconfigure

      - name: Validate Terraform
        run: terraform validate

      - name: Terraform Plan
        id: tf-plan
        run: |
          set +e

          terraform plan \
            -detailed-exitcode \
            -out=${{ env.TF_PLAN_FILE }} \
            -var-file="../configuration/dev/terraform.tfvars" \
            ${{ inputs.destroy == true && '-destroy' || '' }}

          EXITCODE=$?

          case $EXITCODE in
            0) echo "has-changes=false" >> $GITHUB_OUTPUT;;
            2) echo "has-changes=true" >> $GITHUB_OUTPUT;;
            *) exit 1;;
          esac

      - name: Terraform Plan Summary
        run: |
          terraform show -no-color ${{ env.TF_PLAN_FILE }} > plan.txt

          if grep -q "No changes. Your infrastructure matches the configuration." plan.txt; then
            {
              echo "## No changes needed"
              echo "Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed."
            } > plan.md
          else
            {
              echo "## Terraform will perform the following actions:"
              echo ""
              echo "|Action|Resource|"
              echo "|------|--------|"

              awk '
              /# .* will be created/ {
                gsub(/# /, "", $0); gsub(/ will be created/, "", $0)
                print "|:white_check_mark: create|" $0 "|"
              }
              /# .* will be destroyed/ {
                gsub(/# /, "", $0); gsub(/ will be destroyed/, "", $0)
                print "|:bangbang: destroy|" $0 "|"
              }
              /# .* will be updated in-place/ {
                gsub(/# /, "", $0); gsub(/ will be updated in-place/, "", $0)
                print "|:arrows_counterclockwise: update|" $0 "|"
              }
              /# .* must be replaced/ {
                gsub(/# /, "", $0); gsub(/ must be replaced/, "", $0)
                print "|:recycle: replace|" $0 "|"
              }
              /Plan: [0-9]+ to add, [0-9]+ to change, [0-9]+ to destroy/ {
                print ""
                print "## " $0
              }
              ' plan.txt
            } > plan.md
          fi

          cat plan.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        if: ${{ steps.tf-plan.outputs.has-changes == 'true' }}
        with:
          name: ${{ env.TF_PLAN_FILE }}
          path: "**/${{ env.TF_PLAN_FILE }}"
          retention-days: 1

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: dev-apply
    needs: plan
    if: needs.plan.outputs.has-changes == 'true'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN_GH_RUNNER }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get backend bucket from Parameter Store
        id: get-backend-bucket
        run: |
          BACKEND_BUCKET=$(aws ssm get-parameter --name "/tf/backend/s3" --query "Parameter.Value" --output text)
          echo "backend_bucket=$BACKEND_BUCKET" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="bucket=${{ steps.get-backend-bucket.outputs.backend_bucket }}" \
            -backend-config="key=terraform.tfstate" \
            -upgrade \
            -reconfigure

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.TF_PLAN_FILE }}

      - name: Terraform Apply
        run: |
          terraform apply \
            -auto-approve \
            ${{ env.TF_PLAN_FILE }}
